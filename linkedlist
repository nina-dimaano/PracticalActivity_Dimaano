#include <iostream>

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    Node(int data) : data(data), next(nullptr), prev(nullptr) {}
};

class DoublyLinkedList {
private:
    Node* head;
    Node* tail;

public:
    DoublyLinkedList() : head(nullptr), tail(nullptr) {}

    bool isEmpty() const {
        return head == nullptr;
    }

    void addToStart(int data) {
        Node* newNode = new Node(data);
        if (isEmpty()) {
            head = tail = newNode;
        } else {
            newNode->next = head;
            head->prev = newNode;
            head = newNode;
        }
    }

    void addToEnd(int data) {
        Node* newNode = new Node(data);
        if (isEmpty()) {
            head = tail = newNode;
        } else {
            newNode->prev = tail;
            tail->next = newNode;
            tail = newNode;
        }
    }

    void addAtPosition(int position, int data) {
        if (position <= 0) {
            addToStart(data);
        } else if (position >= size()) {
            addToEnd(data);
        } else {
            Node* newNode = new Node(data);
            Node* current = head;
            for (int i = 0; i < position - 1; ++i) {
                current = current->next;
            }
            newNode->next = current->next;
            newNode->prev = current;
            current->next->prev = newNode;
            current->next = newNode;
        }
    }

    void removeFromStart() {
        if (isEmpty()) {
            throw std::out_of_range("Remove from empty list");
        }
        Node* temp = head;
        if (head == tail) {
            head = tail = nullptr;
        } else {
            head = head->next;
            head->prev = nullptr;
        }
        delete temp;
    }

    void removeFromEnd() {
        if (isEmpty()) {
            throw std::out_of_range("Remove from empty list");
        }
        Node* temp = tail;
        if (head == tail) {
            head = tail = nullptr;
        } else {
            tail = tail->prev;
            tail->next = nullptr;
        }
        delete temp;
    }

    void removeAtPosition(int position) {
        if (isEmpty()) {
            throw std::out_of_range("Remove from empty list");
        }
        if (position < 0 || position >= size()) {
            throw std::out_of_range("Index out of bounds");
        }
        if (position == 0) {
            removeFromStart();
        } else if (position == size() - 1) {
            removeFromEnd();
        } else {
            Node* current = head;
            for (int i = 0; i < position; ++i) {
                current = current->next;
            }
            current->prev->next = current->next;
            current->next->prev = current->prev;
            delete current;
        }
    }

    void viewFromStart() const {
        Node* current = head;
        while (current) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }

    void viewFromEnd() const {
        Node* current = tail;
        while (current) {
            std::cout << current->data << " ";
            current = current->prev;
        }
        std::cout << std::endl;
    }

    int viewAtPosition(int position) const {
        if (position < 0 || position >= size()) {
            throw std::out_of_range("Index out of bounds");
        }
        Node* current = head;
        for (int i = 0; i < position; ++i) {
            current = current->next;
        }
        return current->data;
    }

    int size() const {
        int count = 0;
        Node* current = head;
        while (current) {
            ++count;
            current = current->next;
        }
        return count;
    }

    ~DoublyLinkedList() {
        while (!isEmpty()) {
            removeFromStart();
        }
    }
};

// Example usage:
int main() {
    DoublyLinkedList dll;
    dll.addToStart(1);
    dll.addToEnd(2);
    dll.addAtPosition(1, 3);
    dll.viewFromStart();   // Output: 1 3 2
    dll.viewFromEnd();     // Output: 2 3 1
    std::cout << dll.viewAtPosition(1) << std::endl; // Output: 3
    dll.removeFromStart();
    dll.viewFromStart();   // Output: 3 2
    dll.removeFromEnd();
    dll.viewFromStart();   // Output: 3
    dll.removeAtPosition(0);
    dll.viewFromStart();   // Output:
    return 0;
}
