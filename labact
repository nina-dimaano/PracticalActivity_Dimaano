#include <iostream>
#include <string>

struct Node {
    std::string data;
    Node* next;
    Node(std::string data) : data(data), next(nullptr) {}
};

class LinkedList {
private:
    Node* head;

public:
    LinkedList() : head(nullptr) {}

    void insertAtBeginning(const std::string& data) {
        Node* newNode = new Node(data);
        newNode->next = head;
        head = newNode;
    }

    void insertAtEnd(const std::string& data) {
        Node* newNode = new Node(data);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    void insertAfter(const std::string& prevData, const std::string& data) {
        Node* current = head;
        while (current != nullptr && current->data != prevData) {
            current = current->next;
        }
        if (current != nullptr) {
            Node* newNode = new Node(data);
            newNode->next = current->next;
            current->next = newNode;
        } else {
            std::cout << "Previous node not found.\n";
        }
    }

    void deleteNode(const std::string& data) {
        if (head == nullptr) return;
        
        if (head->data == data) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }

        Node* current = head;
        Node* previous = nullptr;
        while (current != nullptr && current->data != data) {
            previous = current;
            current = current->next;
        }

        if (current != nullptr) {
            previous->next = current->next;
            delete current;
        } else {
            std::cout << "Node not found.\n";
        }
    }

    void printList() const {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " -> ";
            current = current->next;
        }
        std::cout << "NULL\n";
    }

    ~LinkedList() {
        while (head != nullptr) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }
};

void menu() {
    LinkedList list;
    int choice;
    std::string data, prevData;

    do {
        std::cout << "\nMenu:\n";
        std::cout << "1. Insert at beginning\n";
        std::cout << "2. Insert at end\n";
        std::cout << "3. Insert after\n";
        std::cout << "4. Delete node\n";
        std::cout << "5. Print list\n";
        std::cout << "6. Exit\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;
        std::cin.ignore();

        switch (choice) {
            case 1:
                std::cout << "Enter data: ";
                std::getline(std::cin, data);
                list.insertAtBeginning(data);
                break;
            case 2:
                std::cout << "Enter data: ";
                std::getline(std::cin, data);
                list.insertAtEnd(data);
                break;
            case 3:
                std::cout << "Enter the previous node data: ";
                std::getline(std::cin, prevData);
                std::cout << "Enter data to insert: ";
                std::getline(std::cin, data);
                list.insertAfter(prevData, data);
                break;
            case 4:
                std::cout << "Enter data of the node to delete: ";
                std::getline(std::cin, data);
                list.deleteNode(data);
                break;
            case 5:
                list.printList();
                break;
            case 6:
                std::cout << "Exiting...\n";
                break;
            default:
                std::cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 6);
}

int main() {
    menu();
    return 0;
}
